{"version":3,"sources":["game/ttt-game.js","utils/index.js","game/game.js","reportWebVitals.js","index.js","App.js"],"names":["NEXT_TURN","O","X","reducer","state","action","type","payload","status","getInitialState","x","y","grid","turn","nextState","JSON","parse","stringify","clone","flatGrid","reduce","acc","cur","checkForWin","filter","Boolean","length","checkForDraw","rows","columns","mapper","Array","fill","map","matchTree","a","b","c","nw","n","ne","w","e","sw","s","se","Game","React","useReducer","dispatch","css","onClick","Grid","handleClick","backgroundColor","display","gridTemplateRows","gridTemplateColumns","gridGap","row","rowIdx","value","colIdx","Cell","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9231ae8a.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { flatten, clone } from \"../utils\";\n\nexport function useTicTacToe() {\n  return React.useReducer(reducer, getInitialState());\n}\n\nconst NEXT_TURN = {\n  O: \"X\",\n  X: \"O\",\n};\n\nfunction reducer(state, action) {\n  const { type, payload } = action;\n  if (state.status === \"success\" && action.type !== \"RESET\") {\n    return state;\n  }\n  switch (type) {\n    case \"RESET\": {\n      return getInitialState();\n    }\n    case \"CLICK\": {\n      const { x, y } = payload;\n      const { grid, turn } = state;\n\n      if (grid[y][x]) {\n        return state;\n      }\n\n      const nextState = clone(state);\n      nextState.grid[y][x] = turn;\n\n      const flatGrid = flatten(nextState.grid);\n\n      if (checkForWin(flatGrid)) {\n        nextState.status = \"success\";\n        return nextState;\n      }\n\n      if (checkForDraw(flatGrid)) {\n        return getInitialState();\n      }\n\n      nextState.turn = NEXT_TURN[turn];\n\n      return nextState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction getInitialState() {\n  return {\n    grid: newTicTacToeGrid(),\n    turn: \"X\",\n    status: \"inProgress\",\n  };\n}\n\nfunction newTicTacToeGrid() {\n  return generateGrid(3, 3, () => null);\n}\n\nfunction generateGrid(rows, columns, mapper) {\n  return Array(rows)\n    .fill(null)\n    .map(() => Array(columns).fill(null).map(mapper));\n}\n\nfunction matchTree(a, b, c) {\n  if (!a || !b || !c) return false;\n\n  return a === b && b === c;\n}\n\nfunction checkForWin(flatGrid) {\n  // prettier-ignore\n  const [\n      nw, n, ne, \n       w, c, e, \n      sw, s, se\n    ] = flatGrid;\n\n  return (\n    // horizontals\n    matchTree(nw, n, ne) ||\n    matchTree(w, c, e) ||\n    matchTree(sw, s, se) ||\n    // verticals\n    matchTree(nw, w, sw) ||\n    matchTree(n, c, s) ||\n    matchTree(ne, e, se) ||\n    // diagonal\n    matchTree(nw, c, se) ||\n    matchTree(sw, c, ne)\n  );\n}\n\nfunction checkForDraw(flatGrid) {\n  return (\n    !checkForWin(flatGrid) &&\n    flatGrid.filter(Boolean).length === flatGrid.length\n  );\n}\n","export function flatten(arr) {\n  return arr.reduce((acc, cur) => [...acc, ...cur], []);\n}\n\nexport function clone(x) {\n  return JSON.parse(JSON.stringify(x));\n}\n","import { useTicTacToe } from \"./ttt-game\";\n\nexport function Game() {\n  const [state, dispatch] = useTicTacToe();\n  const { grid, status, turn } = state;\n\n  const handleClick = (x, y) => {\n    dispatch({ type: \"CLICK\", payload: { x, y } });\n  };\n  const reset = () => {\n    dispatch({ type: \"RESET\" });\n  };\n  return (\n    <div css={{ display: \"inline-block\" }}>\n      <div\n        css={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          marginBottom: \"0.25em\",\n        }}\n      >\n        <div>Next turn: {turn}</div>\n        <div>{status === \"success\" ? `${turn} won!` : null}</div>\n        <button onClick={reset} type=\"button\">\n          Reset\n        </button>\n      </div>\n      <div>\n        <Grid grid={grid} handleClick={handleClick}></Grid>\n      </div>\n    </div>\n  );\n}\n\nfunction Grid({ grid, handleClick }) {\n  return (\n    <div\n      css={{\n        display: \"inline-block\",\n      }}\n    >\n      <div\n        css={{\n          backgroundColor: \"#444\",\n          display: \"grid\",\n          gridTemplateRows: `repeat(${grid.length}, 1fr)`,\n          gridTemplateColumns: `repeat(${grid[0].length}, 1fr)`,\n          gridGap: 2,\n        }}\n      >\n        {grid.map((row, rowIdx) =>\n          row.map((value, colIdx) => (\n            <Cell\n              key={`${colIdx}-${rowIdx}`}\n              value={value}\n              onClick={() => {\n                handleClick(colIdx, rowIdx);\n              }}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction Cell({ onClick, value }) {\n  return (\n    <div\n      css={{\n        backgroundColor: \"#fff\",\n        width: 100,\n        height: 100,\n      }}\n    >\n      <button\n        css={{\n          width: \"100%\",\n          height: \"100%\",\n        }}\n        onClick={onClick}\n        type=\"button\"\n      >\n        {value}\n      </button>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\nimport { Game } from \"./game\";\n\nexport default function App() {\n  return (\n    <div css={{ margin: \"1em\" }}>\n      <header>\n        <h1>Tic Tac Toe in React</h1>\n      </header>\n      <Game />\n    </div>\n  );\n}\n"],"sourceRoot":""}